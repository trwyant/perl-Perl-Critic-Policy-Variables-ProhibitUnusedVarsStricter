.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter 3"
.TH Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter 3 "2013-06-05" "perl v5.18.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Perl::Critic::Policy::Variables::ProhibitUnusedVarsStricter \- Don't ask for storage you don't need.
.SH "AFFILIATION"
.IX Header "AFFILIATION"
This Policy is stand-alone, and is not part of the core
Perl::Critic.
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Unused variables clutter code and require the reader to do mental
bookkeeping to figure out if the variable is actually used or not.
.PP
Right now, this only looks for lexical variables which are unused other
than in the statement that declares them.
.PP
.Vb 4
\&    my $x;          # not ok, assuming no other appearances.
\&    my @y = ();     # not ok, assuming no other appearances.
\&    our $z;         # ok, global.
\&    local $w;       # ok, global.
.Ve
.PP
This policy is a variant on the core policy
Perl::Critic::Policy::Variables::ProhibitUnusedVariables
which attempts to be more strict in its checking of whether a variable
is used. The specific differences are:
.PP
* An attempt is made to take into account the scope of the declaration.
.PP
* An attempt is made to find variables which are interpolated into
double-quotish strings (including regexes) and here documents.
.PP
* An attempt is made to find variables which are used in regular
expression \f(CW\*(C`(?{...})\*(C'\fR and \f(CW\*(C`(??{...})\*(C'\fR constructions, and in the
replacement portion of \f(CW\*(C`s/.../.../e\*(C'\fR.
.PP
This policy intentionally does not report variables as unused if the
code takes a reference to the variable, even if it is otherwise unused.
For example things like
.PP
.Vb 2
\&    \e( my $foo = \*(Aqbar\*(Aq )
\&    \edo{ my $foo => \*(Aqbar\*(Aq }
.Ve
.PP
will not be reported as a violation even if \f(CW$foo\fR is otherwise unused.
The reason is that this is an idiom for making a reference to a mutable
string when all you have is an immutable string. This policy does not
check to see if anything is done with the reference.
.PP
This policy also does not detect unused variables declared inside
various odd corners such as
.PP
.Vb 5
\&    s///e
\&    qr{(?{...})}
\&    qr{(??{...})}
\&    "@{[ ... ]}"
\&    ( $foo, my $bar ) = ( 1, 2 )
.Ve
.PP
Most of these are because the \s-1PPI\s0 parse of the original document does
not include the declarations. The list assignment is missed because \s-1PPI\s0
does not parse it as containing a
PPI::Statement::Variable. However, variables
\&\fBused\fR inside such construction \fBwill\fR be detected.
.SH "CONFIGURATION"
.IX Header "CONFIGURATION"
This policy supports the following configuration items:
.SS "allow_unused_subroutine_arguments"
.IX Subsection "allow_unused_subroutine_arguments"
By default, this policy prohibits unused subroutine arguments \*(-- that
is, unused variables on the right-hand side of such simple assignments
as
.PP
.Vb 4
\&    my ( $foo ) = @_;
\&    my $bar     = shift;
\&    my $baz     = shift @_;
\&    my $burfle  = $_[0];
.Ve
.PP
If you wish to allow unused variables in this case, you can add a block
like this to your \fI.perlcriticrc\fR file:
.PP
.Vb 2
\&    [Variables::ProhibitUnusedVarsStricter]
\&    allow_unused_subroutine_arguments = 1
.Ve
.SS "prohibit_reference_only_variables"
.IX Subsection "prohibit_reference_only_variables"
By default, this policy allows otherwise-unused variables if the code
takes a reference to the variable when it is created. If you wish to
declare a violation in this case, you can add a block like this to your
\&\fI.perlcriticrc\fR file:
.PP
.Vb 2
\&    [Variables::ProhibitUnusedVarsStricter]
\&    prohibit_reference_only_variables = 1
.Ve
.SS "allow_if_computed_by"
.IX Subsection "allow_if_computed_by"
You may wish to allow variables to be unused when computed in certain
ways. For example, you might want to allow place-holder variables in a
list computed by \f(CW\*(C`stat()\*(C'\fR or \f(CW\*(C`unpack()\*(C'\fR. Or you may be doing
end-of-scope detection with something like
\&\f(CW\*(C`my $foo = Scope::Guard\->new( \e&end_of_scope )\*(C'\fR. To ignore all
these, you can add a block like this to your \fI.perlcriticrc\fR file:
.PP
.Vb 2
\&    [Variables::ProhibitUnusedVarsStricter]
\&    allow_if_computed_by = stat unpack Scope::Guard
.Ve
.PP
This property takes as its value a whitespace-delimited list of class or
subroutine names. Nothing complex is done to implement this \*(-- the
policy simply looks at the first word after the equals sign, if any.
.SH "AUTHOR"
.IX Header "AUTHOR"
Thomas R. Wyant, \s-1III \s0\fIwyant at cpan dot org\fR
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2012\-2013 Thomas R. Wyant, \s-1III\s0
.PP
This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory \s-1LICENSES.\s0
.PP
This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.
